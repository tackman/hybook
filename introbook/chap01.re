= Hyとは / 概要

== 完全にPythonであり、Lispである

プログラミング言語Hyは、Pythonランタイム上で動くLisp方言です。
Hyのコードが実行される時に、まずHy -> Python のコードにコンパイルされ、その上でPythonと同様に実行されます。

HyはLispの方言ではありますが、あくまでPythonの上に構築されたものです。
Python上のLisp風DSL、というのが一番実態に近いかもしれません。

Hyは完全にPythonです。具体的には、次のような特性を備えています。

 * 基本的なデータ型がPythonと共通している。tuple, dict, listなど。Hyのbuilt in機能のレベルでgeneratorにも対応しています 
 * Pythonのモジュールをそのままimportできる。定義ファイルなどを書く必要はありません
 * Pythonコードの生成機能がある。単に生成機能があるだけでなく、基本的に予測可能なコンパイル後コードを出力
 * 上記機能を使って、Hyで書いた資産をPython側で利用可能
 * 上記機能で、Pythonランタイム縛りのある環境（Cloud Functions等）でもHyで書いて実行可能

== Hyを使う理由

Pythonは広く普及している言語です。また、数値計算や機械学習などいくつかの分野ではデファクトスタンダードになっており、
各種ライブラリの充実度合いからPythonが選択されることもあります。

一方で、Pythonはプログラミング初学者にとっつきやすいとされている一方、
使い倒そうとすると不満が出てくる言語でもあります。
元々は古い言語であるため、、、、、、、、、、、、

「充実したPythonのライブラリ群を使いたい」「もっと書きやすい言語を使いたい」「Lispを使いたい」
これらをまとめて満たす言語として、Hyは高いポテンシャルを持っています。


== うれしいこと・かなしいこと

=== うれしいこと

何を置いても、まずLispであることです。LispとS式は好き嫌いが分かれると思いますが、
好きの側の人にはLispであることが選択の理由になるでしょう。

Lispでありながら、Pythonの資産を完全に利用できます。
ランタイムも含めてPythonなので、インピーダンスミスマッチに悩まされる可能性はほぼありません。
Common LispやClojureでなく、Hyを選ぶ理由はここにあるでしょう。

もう少し消極的な理由として、AltPythonとして使えるという点があります。
モダンな言語で経験を積んだプログラマーは、Pythonの至らない点にストレスを感じていることが少なくありません。
太古の姿のまま高い完成度を誇るLispの一族として、Hyはそこに光をもたらしてくれる希望があります。

=== かなしいこと

PythonはHPCの文脈では「遅い」とされている言語です。
HyはあくまでPythonランタイム上で動くため、この問題は解決されません。
計算量が多い問題に対しては、そもそもPython以外の回答が必要になるでしょう。

HyはPythonにコンパイル→実行をするので、その分コンパイル時のオーバーヘッドは大きくなります。

Hyは極めてマイナーな言語です。そのためエディタのサポートも弱く、落ちている情報の量も多くはありません。
ユーザー数がオーダー単位で多いJavaScriptの世界からPythonの世界に来ると文明レベルの差に愕然としますが、
HyのユーザーはPythonよりもさらに数桁少ないです。
ここには未開拓の大地が広がっていて、DIYを求められるシーンは少なくありません。

DIYを求められるのですが、そのような状況でLisp系言語であることは強い武器になるでしょう。
チェーンソーを使って林野を切り開きましょう。

